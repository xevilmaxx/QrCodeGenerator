using LibQrGenerator.Enums;
using LibQrGenerator.Payloads;
using LibQrGenerator.QrDrawerFactory;

namespace QrCodeGenerator2
{
    internal class Program
    {

        static string GenerateRandomString(int length)
        {
            const string chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
            var random = new Random();
            return new string(Enumerable.Repeat(chars, length)
              .Select(s => s[random.Next(s.Length)]).ToArray());
        }

        static void Main(string[] args)
        {

            var msg = new PayloadGenerator.ContactData(
                PayloadGenerator.ContactData.ContactOutputType.VCard4,
                GenerateRandomString(5),
                GenerateRandomString(10),
                "EvilMax"
                ).ToString();

            var qr = new QrDrawerFactory().GetDriver(DrawDriverType.SkiaSharp)
                .SetQr(msg)
                .SetImageFormat(CommonImageFormat.Png);

            var Img = qr.GetBytes();

            var isImgSaved = qr.Save("./Tmp.png");

            //-----------------------------------------------------------------

            var qr2 = new QrDrawerFactory().GetDriver(DrawDriverType.ImageSharp)
                .SetQr(GenerateRandomString(5))
                .SetImageFormat(CommonImageFormat.Jpeg);

            var Img2 = qr.GetBytes();

            var isImgSaved2 = qr.Save("./Tmp2.jpg");

            //------------------------------------------------------------------

            Console.WriteLine($"Qr1 img generated bytes: {Img?.Length}");
            Console.WriteLine($"Qr1 img save result: {isImgSaved}");

            Console.WriteLine($"Qr2 img generated bytes: {Img2?.Length}");
            Console.WriteLine($"Qr2 img save result: {isImgSaved2}");

            Console.ReadLine();

        }
    }
}